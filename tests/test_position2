from uf.wrapper.swift_api import SwiftAPI
from uf.utils.log import *
from time import *

getting_position = "True"  # will be "True" while the user is capturing positions
logger_init(logging.DEBUG)
swift = SwiftAPI()  # default by filters: {'hwid': 'USB VID:PID=2341:0042'}
sleep(2)

#
# def report_position(position):
#     global getting_position
#     file = open("live_position.json", "r")
#     data = file.readline()
#     getting_position = data[22:26]
#     if getting_position != "True":  # the user pressed the STOP button on index.html
#         return
#     file.close()
#     file = open("live_position.json", "w")
#     json_text = "\"getting_position\": \"{getting_position}\", \"x\": \"{x}\", \"y\": \"{y}\", \"z\": \"{z}\""
#     json_text = json_text.format(x=position[0], y=position[1], z=position[2], getting_position=getting_position)
#     json_text = "{" + json_text + "}"
#     file.write(json_text)
#     file.close()
#
#
# file = open("live_position.json", "w")
# json_text = "{\"getting_position\": \"True\", \"x\": \"0\", \"y\": \"0\", \"z\": \"0\"}"
# file.write(json_text)
# file.close()
#
# sleep(2)
# swift.send_cmd_sync("M2019")
# swift.register_report_position_callback(report_position)
# swift.set_report_position(1)
# while getting_position == "True":
#     pass
swift.send_cmd_sync("M302 S0")
# swift.set_position(e=0, speed=1500, timeout=30, wait=True)
swift.set_wrist(90, wait=True)
swift.set_wrist(90, wait=True)
swift.set_wrist(90, wait=True)
swift.set_wrist(200, wait=True)
# swift.set_position(120, 0, 50, speed=1500, timeout=30, wait=True)
swift.close_conn()